<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Favourite (whonix?) bash script boilerplate template?</title>
    <link>http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235</link>
    <description>Anyone have a favourite bash script boilerplate template?

Includes usage, parameter parsing, whatever else can be thought of?

Or favourite whonix script that exemplifies more of the &#39;whonix way&#39; than others?

Seems every time I write bash I reinvent  the wheel.

If I can follow any whonix standard / convention from the get go, things will be smoother / more palatable, so this seemed a prudent question to ask up front.

[No flamewar intended.]</description>
    <language>en</language>
    <lastBuildDate>Fri, 18 Mar 2016 03:23:07 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Favourite (whonix?) bash script boilerplate template?</title>
        <dc:creator><![CDATA[rAntOCauDgb]]></dc:creator>
        <description><![CDATA[
            <aside class="quote" data-post="2" data-topic="2235">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/user_avatar/forums.whonix.org/patrick/40/17_1.png" class="avatar"> Patrick:</div>
<blockquote>
<p>Perhaps get <a href="https://github.com/Whonix/Whonix" rel="nofollow noopener">https://github.com/Whonix/Whonix</a> and submodules. Then you’ll have all the packages. Then have a glimpse at various bash scripts.</p>
<p>grep --exclude-dir=.git ‘#!/bin/bash’</p>
</blockquote>
</aside>
<p>Only 100. Interesting.<br>
<code><br>
Whonix/buildconfig.d/30_apt_sources.conf<br>
Whonix/buildconfig.d/30_apt_opts.conf<br>
Whonix/debian/gain-root-command<br>
Whonix/debian/whonix.postinst<br>
Whonix/build-steps.d/1150_export-libvirt-xml<br>
Whonix/build-steps.d/2800_create-report<br>
Whonix/build-steps.d/1100_prepare-build-machine<br>
Whonix/build-steps.d/1700_install-packages<br>
Whonix/build-steps.d/2700_export-vbox-vm<br>
Whonix/build-steps.d/2400_convert-raw-to-qcow2<br>
Whonix/build-steps.d/2300_run-chroot-scripts-post-d<br>
Whonix/build-steps.d/2500_convert-raw-to-vdi<br>
Whonix/build-steps.d/1200_create-debian-packages<br>
Whonix/build-steps.d/1300_create-raw-image<br>
Whonix/build-steps.d/2600_create-vbox-vm<br>
Whonix/changelog.upstream<br>
Whonix/whonix_build<br>
Whonix/make-helper-overrides.bsh<br>
Whonix/help-steps/unmount-raw-force<br>
Whonix/help-steps/gain-root-command<br>
Whonix/help-steps/delete-qcow<br>
Whonix/help-steps/unprevent-daemons-from-starting<br>
Whonix/help-steps/chroot-raw<br>
Whonix/help-steps/git_sanity_test<br>
Whonix/help-steps/variables<br>
Whonix/help-steps/prevent-daemons-from-starting<br>
Whonix/help-steps/cleanup-files<br>
Whonix/help-steps/unmount-raw<br>
Whonix/help-steps/delete-vbox-vm<br>
Whonix/help-steps/umount_kill.sh<br>
Whonix/help-steps/analyze_image<br>
Whonix/help-steps/gpg_test_sign<br>
Whonix/help-steps/mount-raw<br>
Whonix/help-steps/create-local-temp-apt-repo<br>
Whonix/help-steps/unchroot-raw<br>
Whonix/help-steps/whonix_build_one<br>
Whonix/help-steps/pre<br>
Whonix/help-steps/colors<br>
Whonix/help-steps/remove-local-temp-apt-repo<br>
Whonix/help-steps/parse-cmd<br>
Whonix/help-steps/package-sign-cmd<br>
anon-meta-packages/debian/gain-root-command<br>
sdwdate/debian/gain-root-command<br>
sdwdate/debian/sdwdate.postrm<br>
sdwdate/debian/sdwdate.postinst<br>
sdwdate/usr/lib/sdwdate/restart_fresh<br>
sdwdate/usr/lib/sdwdate/sclockadj_kill_helper<br>
sdwdate/usr/lib/sdwdate/clock-fix<br>
sdwdate/usr/lib/sdwdate/suspend-post<br>
sdwdate/usr/lib/sdwdate/sclockadj_debug_helper<br>
sdwdate/usr/lib/sdwdate/suspend-pre<br>
whonix-gw-firewall/debian/gain-root-command<br>
whonix-gw-firewall/debian/whonix-gw-firewall.postinst<br>
whonix-gw-firewall/usr/lib/gateway-shortcuts/firewall50user<br>
whonix-gw-firewall/usr/lib/gateway-shortcuts/firewall30default<br>
whonix-gw-firewall/usr/lib/gateway-shortcuts/reloadfirewall<br>
whonix-gw-firewall/usr/bin/whonix_firewall<br>
whonixcheck/debian/whonixcheck.postinst<br>
whonixcheck/debian/gain-root-command<br>
whonixcheck/usr/lib/whonixcheck/check_pvclock.bsh<br>
whonixcheck/usr/lib/whonixcheck/help_cli.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_news.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_control_port_filter.bsh<br>
whonixcheck/usr/lib/whonixcheck/uwt_tool.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_socks_or_trans_port.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_initializer.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_operating_system.bsh<br>
whonixcheck/usr/lib/whonixcheck/root_check.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_whonixsetup_done.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_qubes.bsh<br>
whonixcheck/usr/lib/whonixcheck/process_killer_helper.bsh<br>
whonixcheck/usr/lib/whonixcheck/preparation.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_ip_forwarding_disabled.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_socks_port_reachability.bsh<br>
whonixcheck/usr/lib/whonixcheck/cleanup.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_bootstrap.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_hostname.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_stream_isolation.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_config.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_virtualizer.bsh<br>
whonixcheck/usr/lib/whonixcheck/function_manual_run.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_package_manager_running.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_enabled.bsh<br>
whonixcheck/usr/lib/whonixcheck/pin_ssl_cert.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_systemd_clock.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_tor_pid.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_apt_repository.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_logs.bsh<br>
whonixcheck/usr/lib/whonixcheck/parse_cmd.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_torbrowser.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_entropy.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_timezone.bsh<br>
whonixcheck/usr/lib/whonixcheck/disclaimer.bsh<br>
whonixcheck/usr/lib/whonixcheck/donate.bsh<br>
whonixcheck/usr/lib/whonixcheck/autostart.bsh<br>
whonixcheck/usr/lib/whonixcheck/check_packages.bsh<br>
whonixcheck/usr/lib/apt-get-wrapper<br>
whonixcheck/usr/lib/apt-get-update<br>
whonixcheck/usr/lib/whonixcheckdaemon<br>
whonixcheck/usr/bin/whonixcheck<br>
</code></p>
<p>Oops. Overlooked submodules … (git clone --recursive). WIth (Whonix/Whonix) submodules it goes up to 458.</p>
          <p><a href="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/3">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/3</link>
        <pubDate>Fri, 18 Mar 2016 03:23:07 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-2235-3</guid>
        <source url="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235.rss">Favourite (whonix?) bash script boilerplate template?</source>
      </item>
      <item>
        <title>Favourite (whonix?) bash script boilerplate template?</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Perhaps get <a href="https://github.com/Whonix/Whonix">https://github.com/Whonix/Whonix</a> and submodules. Then you’ll have all the packages. Then have a glimpse at various bash scripts.</p>
<pre><code>grep --exclude-dir=.git '#!/bin/bash'
</code></pre>
<p>parse cmd example:</p>
<ul>
<li><a href="https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/parse_cmd.bsh">https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/parse_cmd.bsh</a></li>
</ul>
<p>usage help:</p>
<ul>
<li>very minimal due to lack of time</li>
<li><a href="https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/help_cli.bsh">https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/help_cli.bsh</a></li>
</ul>
<p>parse config folder example:</p>
<ul>
<li><a href="https://github.com/Whonix/whonix-gw-firewall/blob/d6c1e0bc95257c81d8c2bcd3d0959b37e53211dd/usr/bin/whonix_firewall#L28-L44">https://github.com/Whonix/whonix-gw-firewall/blob/d6c1e0bc95257c81d8c2bcd3d0959b37e53211dd/usr/bin/whonix_firewall#L28-L44</a></li>
</ul>
<p>error handler example:</p>
<ul>
<li><a href="https://github.com/Whonix/whonix-gw-firewall/blob/d6c1e0bc95257c81d8c2bcd3d0959b37e53211dd/usr/bin/whonix_firewall#L13-L26">https://github.com/Whonix/whonix-gw-firewall/blob/d6c1e0bc95257c81d8c2bcd3d0959b37e53211dd/usr/bin/whonix_firewall#L13-L26</a></li>
</ul>
<p>mostly useful conventions:</p>
<ul>
<li>mostly for useful for bigger scripts</li>
<li>set -e (to have tight control over exit codes)</li>
<li>have an err trap</li>
<li>set -o pipefail (when using at least one pipe)</li>
</ul>
<p>Run scripts through <a href="https://packages.debian.org/jessie/shellcheck">shellcheck</a> and fix whatever makes sense. (Apart from false positives and other non-issues.)</p>
<p>Deepening on task.</p>
<ul>
<li>A very simple script: <a href="https://github.com/Whonix/sdwdate/blob/master/usr/lib/sdwdate/suspend-pre">https://github.com/Whonix/sdwdate/blob/master/usr/lib/sdwdate/suspend-pre</a>
</li>
<li>a more complex example would be whonixcheck (supports sourceing a config folder, sources the script snippet folder, therefore allows overwriting/extending shell functions, allows to skip shell functions by name (whonixcheck_skip_functions), input detection cli vs gui, and more)</li>
</ul>
<p>Don’t make it a science. As long as it’s secure, readable and good enough, I don’t think we should to be overly strict.</p>
          <p><a href="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/2">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/2</link>
        <pubDate>Tue, 15 Mar 2016 21:12:47 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-2235-2</guid>
        <source url="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235.rss">Favourite (whonix?) bash script boilerplate template?</source>
      </item>
      <item>
        <title>Favourite (whonix?) bash script boilerplate template?</title>
        <dc:creator><![CDATA[rAntOCauDgb]]></dc:creator>
        <description><![CDATA[
            <p>Anyone have a favourite bash script boilerplate template?</p>
<p>Includes usage, parameter parsing, whatever else can be thought of?</p>
<p>Or favourite whonix script that exemplifies more of the ‘whonix way’ than others?</p>
<p>Seems every time I write bash I reinvent  the wheel.</p>
<p>If I can follow any whonix standard / convention from the get go, things will be smoother / more palatable, so this seemed a prudent question to ask up front.</p>
<p>[No flamewar intended.]</p>
          <p><a href="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/1">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235/1</link>
        <pubDate>Tue, 15 Mar 2016 20:15:00 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-2235-1</guid>
        <source url="http://forums.whonix.org/t/favourite-whonix-bash-script-boilerplate-template/2235.rss">Favourite (whonix?) bash script boilerplate template?</source>
      </item>
  </channel>
</rss>
