<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
    <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976</link>
    <description>Since `/dev/{,u}random` are writable, would it be possible for an attacker to feed those devices with bad entropy so the attacker could then e.g. decrypt a connection?

If so, it&#39;d best to only allow read access for the same reason we deny write access to SSL certificates.</description>
    <language>en</language>
    <lastBuildDate>Sat, 09 Oct 2021 20:35:29 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>me:</p>
<blockquote>
<p>Mixing even fully compromised entropy sources is considered secure in the current Linux kernel implementation. Though, D. J. Bernstein disagrees with that: <a href="https://blog.cr.yp.to/20140205-entropy.html" class="inline-onebox">cr.yp.to: 2014</a></p>
</blockquote>
<p><a href="https://github.com/3hhh">@3hhh</a> <a href="https://github.com/QubesOS/qubes-issues/issues/6941#issuecomment-939260649">https://github.com/QubesOS/qubes-issues/issues/6941#issuecomment-939260649</a></p>
<blockquote>
<p>Bernstein assumes that you have entropy sources that you trust and some that are less trustworthy. If that’s true, his statement on “stick with the single one you trust and ditch all other input” is correct (and you only need 256 bits or so exactly once).</p>
<p>However the Linux guys assume that you don’t want to ultimately trust any of the entropy sources available to you (or are too uninformed to make the decision) and thus live with a few potential attacks.</p>
<p>I believe the latter is a more realisitic view atm (Linux runs on many “suboptimal” devices). If you build your own hardware RNG and use that, Bernstein’s view is more accurate.</p>
</blockquote>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/11">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/11</link>
        <pubDate>Sat, 09 Oct 2021 20:35:29 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-11</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <p>I’m not saying to deploy it now. The patch is just for initial testing to see what happens.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/10">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/10</link>
        <pubDate>Thu, 20 Feb 2020 21:22:25 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-10</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Unless this gets reviews from someone like Stephan or Ted Ts’o and is approved for inclusion upstream, realistically it stands little chance for deployment. Accepting changes with unforeseen consequences to something as sensitive as kernel entropy, is malpractice.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/9">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/9</link>
        <pubDate>Thu, 20 Feb 2020 20:50:02 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-9</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <p>I created a basic kernel patch to test this. It only enables those ioctls when <code>CONFIG_RANDOM_UNSAFE_IOCTL</code> is enabled. To disable them, compile your kernel with <code>CONFIG_RANDOM_UNSAFE_IOCTL</code> disabled.</p>
<p><a href="https://paste.debian.net/hidden/2ffaebb6/" class="onebox" target="_blank">https://paste.debian.net/hidden/2ffaebb6/</a></p>
<p>I did some testing to see if the entropy decreased by a considerable amount.</p>
<p>“entropy” here being measured via the contents of <code>/proc/sys/kernel/random/entropy_avail</code>.</p>
<p>With the ioctls enabled, entropy stays around 1180 - 1250.</p>
<p>With the ioctls disabled, entropy stays around 1220 - 1280.</p>
<p>Weirdly, the entropy seemed to increase with the ioctls disabled but it’s highly likely that’s just a coincidence as the contents of <code>/proc/sys/kernel/random/entropy_avail</code> can fluctuate quite a bit.</p>
<p>The haveged systemd service failed with the message: <code>haveged: RNDADDENTROPY failed!</code>.</p>
<p>The jitterentropy systemd service worked fine.</p>
<p>The virto-rng module seemed to work fine.</p>
<p>There was no noticeable slow down of boot and nothing else seemed to break.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/8">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/8</link>
        <pubDate>Thu, 20 Feb 2020 18:53:19 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-8</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Patrick" data-post="5" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/user_avatar/forums.whonix.org/patrick/40/17_2.png" class="avatar"> Patrick:</div>
<blockquote>
<p>I don’t know if it requires any capabilities.</p>
</blockquote>
</aside>
<p>It requires CAP_SYS_ADMIN. We can’t remove that capability though since it’s widely used.</p>
<p>Very little things are actually restricted to uid 0 anymore in Linux, everything is split up into capabilities.</p>
<aside class="quote no-group" data-username="Patrick" data-post="5" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/user_avatar/forums.whonix.org/patrick/40/17_2.png" class="avatar"> Patrick:</div>
<blockquote>
<p>First, we need to understand better what are the legitimate use cases of these syscalls are and what currently legitimate programs are that make use of these. Likely users are haveged / jitterentropy-rng (user space daemon and kernel module) / virio-rng among perhaps kernel internal code. Such patches need to be carefully reviewed. Potential side effects:</p>
<ul>
<li>slow (or even broken) boot because RNDADDTOENTCNT is slow/broken</li>
<li>/dev/random entropy starvation after system started</li>
<li>low/zero entropy quality of /dev/urandom or even /dev/random</li>
<li>broken haveged / jitterentropy-rng (user space daemon and kernel module) / virio-rng among perhaps kernel internal code</li>
</ul>
</blockquote>
</aside>
<p>Userspace daemons like haveged do use <code>RNDADDENTROPY</code> AFAIK. We don’t have to patch that ioctl out entirely, but we can restrict it to only the things that need it.</p>
<p>Internal kernel code (including the jitterentropy and virtio-rng modules) don’t use these ioctls. I grepped the entire source tree and nothing uses it.</p>
<aside class="quote no-group" data-username="HulaHoop" data-post="6" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v4/letter/h/edb3f5/40.png" class="avatar"> HulaHoop:</div>
<blockquote>
<p>OK I hadn’t thought of this before, but they would still need to modify the package sig keychain to fool it into accepting the modified code. We don’t trust server-client connections for package authenticity anyhow. If it’s broken we are screwed.</p>
</blockquote>
</aside>
<p>Signature verification has been <a href="https://www.debian.org/security/2019/dsa-4371">bypassed before</a>. We don’t want to rely on it completely. Unencrypted connections are still dangerous.</p>
<p>Even ignoring that, sabotaging the entropy still opens up tons of new surveillance opportunities (e.g. the attacker can eavesdrop on browsing/messaging/etc.) and will weaken system security as a whole.</p>
<p>Root is isolated from other users. Even init doesn’t have access to the user’s home directory for example. More ways to further enhance the isolation was discussed here <a href="https://forums.whonix.org/t/apparmor-for-complete-system-including-init-pid1-systemd-everything-full-system-mac-policy/8339/251" class="inline-onebox">AppArmor for Complete System - Including init, PID1, Systemd, Everything! - Full System MAC policy</a></p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/7">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/7</link>
        <pubDate>Thu, 20 Feb 2020 16:21:08 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-7</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="madaidan" data-post="1" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v4/letter/m/ea5d25/40.png" class="avatar"> madaidan:</div>
<blockquote>
<p>Since <code>/dev/{,u}random</code> are writable, would it be possible for an attacker to feed those devices with bad entropy so the attacker could then e.g. decrypt a connection?</p>
</blockquote>
</aside>
<p>Why bother if while they are here they can see and exfiltrate plaintext form the machine?</p>
<aside class="quote no-group" data-username="madaidan" data-post="3" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v4/letter/m/ea5d25/40.png" class="avatar"> madaidan:</div>
<blockquote>
<p>An attacker may be able to compromise init, feed a large amount of bad entropy into <code>/dev/{,u}random</code> during early boot and then use that to compromise e.g. the connection used to download kernel sources and backdoor them.</p>
</blockquote>
</aside>
<p>OK I hadn’t thought of this before, but they would still need to modify the package sig keychain to fool it into accepting the modified code. We don’t  trust server-client connections for package authenticity anyhow. If it’s broken we are screwed.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/6">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/6</link>
        <pubDate>Thu, 20 Feb 2020 14:00:57 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-6</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://www.whonix.org/wiki/Dev/Entropy#Write_to_.2Fdev.2Frandom">Writing to /dev/random is generally considered safe.</a></p>
<p><a href="https://www.whonix.org/wiki/Dev/Entropy#Credit_Entropy">Crediting entropy</a> can be dangerous. I.e. syscalls such as <code>RNDADDENTROPY</code> can be dangerous if the randomness added is not secret and/or predictable. Only root can use <code>RNDADDENTROPY</code>. I don’t know if it requires any capabilities. If it does not need any capabilities then indeed this can be an issue in context of <a href="https://forums.whonix.org/t/untrusted-root-improve-security-by-restricting-root/7998" class="inline-onebox">Untrusted Root - improve Security by Restricting Root</a> and <a href="https://forums.whonix.org/t/apparmor-for-complete-system-including-init-pid1-systemd-everything-full-system-mac-policy/8339" class="inline-onebox">AppArmor for Complete System - Including init, PID1, Systemd, Everything! - Full System MAC policy</a>.</p>
<p>For testing purposes we might be able to use <a href="https://www.whonix.org/wiki/Dev/Entropy#rndaddentropy_-_An_RNDADDENTROPY_ioctl_wrapper">rndaddentropy - An RNDADDENTROPY ioctl wrapper</a>. Testing this in Whonix / Kicksecure could be hard because entropy counters there are always high due to haveged / jitterentropy-rng (user space daemon and kernel module) / virio-rng. haveged / jitterentropy-rng / virio-rng are “flooding” entropy and entropy counters. That would make experimenting with changes related to entropy hard. An old, deprecated, insecure kernel version in an old virtualizer version (such as VirtualBox), offline, where there is very little entropy might actually be better suited to experiment with entropy counters.</p>
<aside class="quote no-group" data-username="madaidan" data-post="4" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v4/letter/m/ea5d25/40.png" class="avatar"> madaidan:</div>
<blockquote>
<p>I don’t really understand RNDADDTOENTCNT, RNDZAPENTCNT and RNDCLEARPOOL. Would zeroing the entropy <em>count</em> zero the entire pool and deplete the system of entropy?</p>
<p>If so, those ioctls are massive risks. We can patch them out if needed.</p>
</blockquote>
</aside>
<p>First, we need to understand better what are the legitimate use cases of these syscalls are and what currently legitimate programs are that make use of these. Likely users are haveged / jitterentropy-rng (user space daemon and kernel module) / virio-rng among perhaps kernel internal code. Such patches need to be carefully reviewed. Potential side effects:</p>
<ul>
<li>slow (or even broken) boot because RNDADDTOENTCNT is slow/broken</li>
<li>/dev/random entropy starvation after system started</li>
<li>low/zero entropy quality of /dev/urandom or even /dev/random</li>
<li>broken haveged / jitterentropy-rng (user space daemon and kernel module) / virio-rng among perhaps kernel internal code</li>
</ul>
<hr>
<p>If we have good entropy / randomness related questions we can direct these at Stephan Mueller, author of <a href="https://www.chronox.de/lrng.html">Linux in-kernel Random Number Generator replacement</a>, jitterentropy-rng (kernel module landed in mainline linux), writer of entropy / randomness related research papers for German government. [1]</p>
<ul>
<li>Old questions: <a href="https://github.com/smuellerDD/jitterentropy-rngd/issues/9">https://github.com/smuellerDD/jitterentropy-rngd/issues/9</a>
</li>
<li>Newer questions: <a href="https://github.com/smuellerDD/jitterentropy-library/issues/16">https://github.com/smuellerDD/jitterentropy-library/issues/16</a>
</li>
</ul>
<p>He may or may not be interested to add capabilities to protect entropy related syscalls. Then these would have a fair chance to land in mainline Linux, I think. Though, I cannot read his mind, but I guess from him it might make sense to wait for his new kernel random system to be merged before adding new features / discussions / controversy on top.</p>
<hr>
<p>[1]</p>
<aside class="onebox pdf">
  <header class="source">
      <a href="https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN.pdf" target="_blank">bsi.bund.de</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN.pdf" target="_blank"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN.pdf" target="_blank">LinuxRNG_EN.pdf</a></h3>

<p class="filesize">45.34 KB</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox pdf">
  <header class="source">
      <a href="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/Studien/ZufallinVMS/Randomness-in-VMs.pdf" target="_blank">bsi.bund.de</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/Studien/ZufallinVMS/Randomness-in-VMs.pdf" target="_blank"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/Studien/ZufallinVMS/Randomness-in-VMs.pdf" target="_blank">Randomness-in-VMs.pdf</a></h3>

<p class="filesize">95.75 KB</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/5">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/5</link>
        <pubDate>Thu, 20 Feb 2020 06:27:51 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-5</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <p><code>/dev/{,u}random</code> don’t seem to be the only problem here. There’s also a few ioctls to manage the entropy pool such as RNDADDENTROPY (which can add more entropy to the pool).</p>
<p><a href="https://linux.die.net/man/4/random" class="onebox" target="_blank">https://linux.die.net/man/4/random</a></p>
<p>I’m not sure if these require write access to the devices or just the CAP_SYS_ADMIN capability.</p>
<p>Looking at the code, they don’t seem to require write access to the device but I’m not certain.</p>
<p><a href="https://github.com/torvalds/linux/blob/master/drivers/char/random.c#L1899-L1953">https://github.com/torvalds/linux/blob/master/drivers/char/random.c#L1899-L1953</a></p>
<p>I don’t really understand RNDADDTOENTCNT, RNDZAPENTCNT and RNDCLEARPOOL. Would zeroing the entropy <em>count</em> zero the entire pool and deplete the system of entropy?</p>
<p>If so, those ioctls are massive risks. We can patch them out if needed.</p>
<p>If only apparmor could filter ioctls like SELinux.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/4">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/4</link>
        <pubDate>Wed, 19 Feb 2020 22:52:10 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-4</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="anontor" data-post="2" data-topic="8976">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v4/letter/a/b2d939/40.png" class="avatar"> anontor:</div>
<blockquote>
<p>Although, thinking about it some more, could an initial seeding be maliciously fed? With an initial boot time “bad seed,” any crypto derived thereafter would be compromised if in fact such a thing is possible</p>
</blockquote>
</aside>
<p>Our threat model includes even a compromised init from doing a lot of damage.</p>
<p>An attacker may be able to compromise init, feed a large amount of bad entropy into <code>/dev/{,u}random</code> during early boot and then use that to compromise e.g. the connection used to download kernel sources and backdoor them. Signature verification has had vulnerabilities in the past so we don’t want to rely entirely on that.</p>
<p>Although, I’m still not sure whether <code>/dev/{,u}random</code> can have much of an effect on the overall entropy, even during early boot.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/3">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/3</link>
        <pubDate>Wed, 19 Feb 2020 22:35:45 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-3</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[anontor]]></dc:creator>
        <description><![CDATA[
            <p>That’s a good question which I will try to answer: afaik, when entropy is fed into a pool from somewhere, the source is not really that important. Assuming the initial seeding was successful, even if the source fed low quality data into the pool, it would not negatively affect the overall quality. There are situations where entropy may be fed into the aggregate pool, and nothing happens–no increase in overall bits are observed. Then sometimes, entropy is fed and the total number of bits increases. As I understand it, it is most likely not possibe to detract from the quality already in there. Assuming the OS boots without blocking that is. There was a similar discussion about rdrand and if it could negatively affect the pool even if it was not completely random; the consensus seemed to be no.<br>
Although, thinking about it some more, could an initial seeding be maliciously fed? With an initial boot time “bad seed,” any crypto derived thereafter would be compromised if in fact such a thing is possible</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/2">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/2</link>
        <pubDate>Wed, 19 Feb 2020 22:17:25 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-2</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
      <item>
        <title>risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</title>
        <dc:creator><![CDATA[madaidan]]></dc:creator>
        <description><![CDATA[
            <p>Since <code>/dev/{,u}random</code> are writable, would it be possible for an attacker to feed those devices with bad entropy so the attacker could then e.g. decrypt a connection?</p>
<p>If so, it’d best to only allow read access for the same reason we deny write access to SSL certificates.</p>
          <p><a href="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/1">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976/1</link>
        <pubDate>Wed, 19 Feb 2020 20:51:30 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8976-1</guid>
        <source url="http://forums.whonix.org/t/risks-of-writing-to-dev-random-crediting-entropy-rndaddentropy-related-to-untrusted-root/8976.rss">risks of writing to /dev/random, crediting entropy, RNDADDENTROPY related to untrusted root</source>
      </item>
  </channel>
</rss>
