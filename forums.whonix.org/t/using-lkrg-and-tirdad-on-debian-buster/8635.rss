<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using LKRG and tirdad on Debian Buster</title>
    <link>http://forums.whonix.org/t/using-lkrg-and-tirdad-on-debian-buster/8635</link>
    <description>I decided to try both the Linux Kernel Runtime Guard (LKRG) and tirdad on a regular Debian 10 (Buster) system
LKRG and tirdad both installed from Whonix repository
So how do you know they work?
Good question.
For LKRG, you will see in your logs (journalctl -xe, journalctl etc) that on boot, right after the initial startup of systemd, LKRG starts. It has an orange text so you see it tell you that it loaded successfully.
For tirdad, there is an initial message of &quot;Starting tirdad&quot; right after your Login service starts. A few lines later:  [&gt;] installing tirdad hook succeeded.
LKRG runs quietly in the background and sometimes you see messages in journal. An example,  I was playing around with the framebuffer device, trying new settings, omitting others, and LKRG knew about it. It informed me that the checksum for the space in the memory that the device module should occupy is now different. It also lists the name of the module in question and the 2 checksums so you can see the difference. In my case, I was the cause, so no big deal. But if a malicious module were to try and execute, not only does LKRG see it, but it tells you that you now have an extra module loaded compared to the number it calculated your kernel to have, and it also kills it so it cannot harm your system. Very useful package.
Tirdad stays active after initial execution (check with a systemctl status tirdad and you will see &quot;active&quot;)
This one is harder to see in action; if you have a packet analyzer like wireshark, it is very easy.
Wireshark by default uses &quot;relative sequence numbers&quot; and you need the real number so go to: Edit-&gt;Preferences-&gt;select TCP from &quot;Protocols&quot; list and uncheck the box that says &#39;Relative Sequence numbers&#39; Press Apply, then OK.
Now for an actual packet, select it from the capture scroll, and use the mouse to go to the TCP section. You will see a parameter called Sequence Number. Pay attention to that number for the Client Hello and write it down. Many thousands of packets later, take another  sample of an initial Client Hello and write it down. Have Wireshark collecting your packets for an entire session. When done, save the pcap file and search those two numbers. As long as they were indeed the Initial sequence number, they should not repeat at all.
No errors recorded for either package, and they are a welcome addition to your security arsenal.</description>
    <language>en</language>
    <lastBuildDate>Mon, 16 Dec 2019 16:21:03 +0000</lastBuildDate>
    <category>General Tor and Anonymity Talk</category>
    <atom:link href="http://forums.whonix.org/t/using-lkrg-and-tirdad-on-debian-buster/8635.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using LKRG and tirdad on Debian Buster</title>
        <dc:creator><![CDATA[anontor]]></dc:creator>
        <description><![CDATA[
            <p>I decided to try both the Linux Kernel Runtime Guard (LKRG) and tirdad on a regular Debian 10 (Buster) system<br>
LKRG and tirdad both installed from Whonix repository<br>
So how do you know they work?<br>
Good question.<br>
For LKRG, you will see in your logs (journalctl -xe, journalctl etc) that on boot, right after the initial startup of systemd, LKRG starts. It has an orange text so you see it tell you that it loaded successfully.<br>
For tirdad, there is an initial message of “Starting tirdad” right after your Login service starts. A few lines later:  [&gt;] installing tirdad hook succeeded.<br>
LKRG runs quietly in the background and sometimes you see messages in journal. An example,  I was playing around with the framebuffer device, trying new settings, omitting others, and LKRG knew about it. It informed me that the checksum for the space in the memory that the device module should occupy is now different. It also lists the name of the module in question and the 2 checksums so you can see the difference. In my case, I was the cause, so no big deal. But if a malicious module were to try and execute, not only does LKRG see it, but it tells you that you now have an extra module loaded compared to the number it calculated your kernel to have, and it also kills it so it cannot harm your system. Very useful package.<br>
Tirdad stays active after initial execution (check with a systemctl status tirdad and you will see “active”)<br>
This one is harder to see in action; if you have a packet analyzer like wireshark, it is very easy.<br>
Wireshark by default uses “relative sequence numbers” and you need the real number so go to: Edit-&gt;Preferences-&gt;select TCP from “Protocols” list and uncheck the box that says ‘Relative Sequence numbers’ Press Apply, then OK.<br>
Now for an actual packet, select it from the capture scroll, and use the mouse to go to the TCP section. You will see a parameter called Sequence Number. Pay attention to that number for the Client Hello and write it down. Many thousands of packets later, take another  sample of an initial Client Hello and write it down. Have Wireshark collecting your packets for an entire session. When done, save the pcap file and search those two numbers. As long as they were indeed the Initial sequence number, they should not repeat at all.<br>
No errors recorded for either package, and they are a welcome addition to your security arsenal.</p>
          <p><a href="http://forums.whonix.org/t/using-lkrg-and-tirdad-on-debian-buster/8635/1">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/using-lkrg-and-tirdad-on-debian-buster/8635/1</link>
        <pubDate>Sun, 15 Dec 2019 22:47:24 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-8635-1</guid>
        <source url="http://forums.whonix.org/t/using-lkrg-and-tirdad-on-debian-buster/8635.rss">Using LKRG and tirdad on Debian Buster</source>
      </item>
  </channel>
</rss>
