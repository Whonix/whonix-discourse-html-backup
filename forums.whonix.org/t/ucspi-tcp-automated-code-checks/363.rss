<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ucspi-tcp Automated Code Checks</title>
    <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363</link>
    <description>Patrick because you are well known in the TAILS community and so its likely they&#39;ll listen, is it ok if you post to them my idea about scanning ucspi-tcp with Valgrind to check it doesn&#39;t have memory safety issues? If anyone of them is familiar with C they may be able to patch it if problems arise. For static analysis of the code they can run it free through Coverity Scan or use PeachFuzzer.

https://scan.coverity.com/users/sign_up

I saw your comment on the Apparmor wishlist for a profile for this component, so we are ok in that front containment front, but its better not to have exploitable holes in the first place.

This may see unreasonable, but considering what we are potenitally up against, these measures are needed to cut it.</description>
    <language>en</language>
    <lastBuildDate>Mon, 21 Jul 2014 03:27:40 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Update: trying to run meld gives a bunch of errors related to Gnome not able to run a gui.</p>
<p>I think the valgrind experiment is becoming too much for its gain. I want to concentrate on getting the source code from the repo into git and running coverity.</p>
<p>i edited the other file you refer to in the /etc/apt/sources.list. It doesn’t want to fetch source code for the ucspi-tcp. Saying uri is not specified.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/26">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/26</link>
        <pubDate>Mon, 21 Jul 2014 03:27:40 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-26</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Thank you fro the directions. I will try them. Here is what I get when controlportfiltd is down and valgrind is un after that.</p>
<p><code>root@host:/home/user# sudo service controlportfiltd stop
root@host:/home/user# sudo -u debian-tor valgrind --leak-check=full --show-reachable=yes tcpserver -v -1 -l host -H 0 9052 /bin/bash/ -x -c /usr/lib/whonix/cpf-tcpserver
==6317== Memcheck, a memory error detector
==6317== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==6317== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==6317== Command: tcpserver -v -1 -l host -H 0 9052 /bin/bash/ -x -c /usr/lib/whonix/cpf-tcpserver
==6317== 
9052
tcpserver: status: 0/40
</code></p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/25">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/25</link>
        <pubDate>Wed, 16 Jul 2014 14:01:40 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-25</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>If it worked once but not again, most likely there is still some process left running which keeps the port open.</p>
<p>To see what it really does:</p>
<pre><code class="lang-auto"></code></pre>
<p>(controlportfilt in Whonix 8)<br>
(works with any bash script)</p>
<p>Install graphical diff viewer.</p>
<p><code>sudo apt-get update
sudo apt-get install meld</code></p>
<p>Log processes while fatal error bound address.</p>
<pre><code class="lang-auto"></code></pre>
<p>Reboot.</p>
<pre><code class="lang-auto"></code></pre>
<p>Log processes again after reboot.</p>
<pre><code class="lang-auto"></code></pre>
<p>Compare old and new processes. You should find out which one kept the port open by now.</p>
<pre><code class="lang-auto"></code></pre>
<p>Fatal error bound address should now be gone.</p>
<p>Next time, combine.</p>
<pre><code class="lang-auto"></code></pre>
<pre><code class="lang-auto"></code></pre>
<p>So you find out the pid of the process that blocks.</p>
<pre><code class="lang-auto"></code></pre>
<p>Or.</p>
<pre><code class="lang-auto"></code></pre>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/24">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/24</link>
        <pubDate>Wed, 16 Jul 2014 13:32:56 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-24</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Shutting off controlportfiltd off doesn’t solve the fatal error bound address. Stopping the service doesn’t give me feedback that it has been stopped anymore either. It takes and applies it silently</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/23">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/23</link>
        <pubDate>Wed, 16 Jul 2014 13:22:01 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-23</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>After second test you got this.</p>
<aside class="quote" data-post="19" data-topic="363">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forums.whonix.org/letter_avatar_proxy/v2/letter/h/edb3f5/40.png" class="avatar"> HulaHoop:</div>
<blockquote>
<p>tcpserver: fatal: unable to bind: address already used</p>
</blockquote>
</aside>
<p>You can fix that by running.</p>
<pre><code class="lang-auto"></code></pre>
<p>That will terminate the worker.</p>
<p>Not sure how to proceed from here. Maybe contact upstream, maybe post a bug against Debian, maybe contact the debian security team (if this is security related?). They might ask for instructions on how to reproduce this on debian. I might be able to write a simple dummy script so they can reproduce without getting whole control-port-filter/tor that causes the same issue.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/22">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/22</link>
        <pubDate>Tue, 15 Jul 2014 02:33:28 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-22</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>When communicating with Gerrit’s address I got an automated message to confirm my sending of the email to his box. I hope there is somebody there.</p>
<p>When we finish testing, do you think its enough or useful to post the results we get here to Debian and they will take care of it? Or do they need the results from the same guy who can audit/fix the package manually?</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/21">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/21</link>
        <pubDate>Tue, 15 Jul 2014 02:20:49 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-21</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>I’m out of my depth here but I can guess from the tutorial here: <a href="http://cs.ecs.baylor.edu/~donahoo/tools/valgrind/">http://cs.ecs.baylor.edu/~donahoo/tools/valgrind/</a><br>
that there is a memory allocation problem going on.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/20">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/20</link>
        <pubDate>Tue, 15 Jul 2014 02:03:42 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-20</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p><span class="bbcode-b">sudo -u debian-tor tcpserver -v -1 -l host -H 0 9052 /bin/bash -x -c /usr/lib/whonix/cpf-tcpserver<br>
</span></p>
<p>[code]root@host:/home/user# sudo service controlportfiltd stop<br>
root@host:/home/user# sudo -u debian-tor tcpserver -v -1 -l host -H 0 9052 /bin/bash -x -c /usr/lib/whonix/cpf-tcpserver<br>
9052<br>
tcpserver: status: 0/40<br>
tcpserver: status: 1/40<br>
tcpserver: pid 15004 from 192.168.0.11<br>
tcpserver: ok 15004 host:192.168.0.10:9052 :192.168.0.11::41768</p>
<ul>
<li>‘[’ -z ‘’ ‘]’</li>
<li>return</li>
<li>/usr/lib/whonix/cpf-tcpserver</li>
<li>set -o pipefail</li>
<li>LOG=/var/log/controlportfilt.log</li>
<li>trap error_handler ERR</li>
<li>trap trap_sigint SIGINT<br>
++ uuidgen -r</li>
<li>ID=0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>cpf_pid=15004</li>
<li>echo '0dfc0d53-58e7-45ca-b06a-610ef52721c1 INFO: Getting connection… cpf_pid: 15004 | LD_PRELOAD: ’</li>
<li>kill_after=5s</li>
<li>timeout_after=5s</li>
<li>‘[’ -d /etc/controlportfilt.d ‘]’</li>
<li>for i in ‘/etc/controlportfilt.d/*’</li>
<li>‘[’ -f /etc/controlportfilt.d/30_controlportfilt_default ‘]’</li>
<li>‘[’ t = ‘~’ ‘]’</li>
<li>grep -q .dpkg-</li>
<li>echo /etc/controlportfilt.d/30_controlportfilt_default</li>
<li>source /etc/controlportfilt.d/30_controlportfilt_default<br>
++ CONTROL_PORT_FILTER_PROXY=1<br>
++ CONTROL_PORT_FILTER_VERBOSE=0<br>
++ CONTROL_PORT_FILTER_WHITELIST=(“AUTHENTICATE” “GETINFO net/listeners/socks” “GETINFO status/bootstrap-phase” “SIGNAL NEWNYM” “QUIT”)</li>
<li>‘[’ 0 = 1 ‘]’</li>
<li>i=0</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=authenticate</li>
<li>i=1</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘getinfo net/listeners/socks’</li>
<li>i=2</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘getinfo status/bootstrap-phase’</li>
<li>i=3</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘signal newnym’</li>
<li>i=4</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=quit</li>
<li>i=5</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: authenticate’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo net/listeners/socks’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo status/bootstrap-phase’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: signal newnym’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: quit’</li>
<li>check_tor</li>
<li>trap error_handler ERR</li>
<li>‘[’ -f /var/run/tor/control.authcookie ‘]’</li>
<li>tor_authcookie=0</li>
<li>‘[’ -f /var/run/tor/tor.pid ‘]’</li>
<li>tor_pid=1<br>
++ cat /var/run/tor/tor.pid</li>
<li>tor_pid=2433</li>
<li>tor_pid_running=0</li>
<li>kill -0 2433</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>check_tor_result=0</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>read -r<br>
’ cleaned_reply='GETINFO status/bootstrap-phase<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo 'GETINFO status/bootstrap-phase</li>
<li>cleaned_reply='GETINFO status/bootstrap-phase '<br>
++ tr ‘\n’ ’ '<br>
++ echo 'GETINFO status/bootstrap-phase ’</li>
<li>cleaned_reply='GETINFO status/bootstrap-phase  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo 'GETINFO status/bootstrap-phase  ’</li>
<li>cleaned_reply=‘GETINFO status/bootstrap-phase’</li>
<li>received ‘GETINFO status/bootstrap-phase’</li>
<li>trap error_handler ERR</li>
<li>true ‘GETINFO status/bootstrap-phase’</li>
<li>echo ‘0dfc0d53-58e7-45ca-b06a-610ef52721c1 GOT: GETINFO status/bootstrap-phase’</li>
<li>‘[’ ‘GETINFO status/bootstrap-phase’ = ‘’ ‘]’</li>
<li>read -r first_word _</li>
<li>‘[’ getinfo = authenticate ‘]’</li>
<li>‘[’ getinfo = quit ‘]’</li>
<li>ok=0</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: authenticate’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = authenticate ‘]’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo net/listeners/socks’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo net/listeners/socks’ ‘]’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo status/bootstrap-phase’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo status/bootstrap-phase’ ‘]’</li>
<li>ok=1</li>
<li>true ‘ok: reply getinfo status/bootstrap-phase = element getinfo status/bootstrap-phase’</li>
<li>break</li>
<li>‘[’ ‘!’ 1 = 1 ‘]’</li>
<li>lie_when=‘GETINFO net/listeners/socks’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo net/listeners/socks’ ‘]’<br>
++ mktemp --directory</li>
<li>temp_directory=/tmp/tmp.WAI8uDppTk</li>
<li>IN=/tmp/tmp.WAI8uDppTk/in_0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>OUT=/tmp/tmp.WAI8uDppTk/out_0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>mkfifo /tmp/tmp.WAI8uDppTk/in_0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>mkfifo /tmp/tmp.WAI8uDppTk/out_0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>NC_PID=15022</li>
<li>check_tor</li>
<li>trap error_handler ERR</li>
<li>‘[’ -f /var/run/tor/control.authcookie ‘]’</li>
<li>tor_authcookie=0</li>
<li>‘[’ -f /var/run/tor/tor.pid ‘]’</li>
<li>tor_pid=1<br>
++ cat /var/run/tor/tor.pid</li>
<li>nc 127.0.0.1 9051</li>
<li>tor_pid=2433</li>
<li>tor_pid_running=0</li>
<li>kill -0 2433</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>check_tor_result=0</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>xxd_exit_code=0<br>
++ xxd -c 32 -g 0 /var/run/tor/control.authcookie</li>
<li>temporary_variable_one=‘0000000: 9cea67006a7105d5dbdc03bf9703e824b02c81be5353e311c9b872c267e7ea6a  …g.jq…$.,…SS…r.g…j’</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>read -r temporary_variable_two cookie _</li>
<li>wait 15025</li>
<li>timeout --kill-after=2s 2s echo ‘AUTHENTICATE 9cea67006a7105d5dbdc03bf9703e824b02c81be5353e311c9b872c267e7ea6a’</li>
<li>wait 15027</li>
<li>timeout --kill-after=2s 2s echo ‘GETINFO status/bootstrap-phase’</li>
<li>wait 15029</li>
<li>timeout --kill-after=2s 2s echo QUIT<br>
++ timeout --kill-after=2s 2s cat /tmp/tmp.WAI8uDppTk/in_0dfc0d53-58e7-45ca-b06a-610ef52721c1</li>
<li>var='250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection</li>
<li>ps_p_exit_code=0</li>
<li>ps -p 15022</li>
<li>ps_p_exit_code=1</li>
<li>true</li>
<li>echo ‘0dfc0d53-58e7-45ca-b06a-610ef52721c1 debug: ps_p_exit_code: 1’</li>
<li>‘[’ ‘250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’ = ‘’ ']'g connection</li>
<li>true 'var: 250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection</li>
<li>echo ‘250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection<br>
++ sed -n 1,1p<br>
++ cat /tmp/tmp.WAI8uDppTk/temp_0dfc0d53-58e7-45ca-b06a-610ef52721c1<br>
’ first_line='250 OK<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250 OK</li>
<li>first_line='250 OK '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250 OK ’</li>
<li>first_line='250 OK  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250 OK  ’</li>
<li>first_line=‘250 OK’</li>
<li>‘[’ ‘250 OK’ = ‘250 OK’ ‘]’</li>
<li>true<br>
++ sed -n 2,2p<br>
++ cat /tmp/tmp.WAI8uDppTk/temp_0dfc0d53-58e7-45ca-b06a-610ef52721c1<br>
’ second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”</li>
<li>second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done” '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done” ’</li>
<li>second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”  ’</li>
<li>second_line=‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>write_back ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>trap error_handler ERR</li>
<li>printf ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”\r\n’</li>
<li>echo ‘0dfc0d53-58e7-45ca-b06a-610ef52721c1 BACK: 250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>‘[’ ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’ = ‘250 OK’ ‘]’<br>
++ sed -n 3,3p<br>
++ cat /tmp/tmp.WAI8uDppTk/temp_0dfc0d53-58e7-45ca-b06a-610ef52721c1<br>
’ third_line='250 OK<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250 OK</li>
<li>third_line='250 OK '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250 OK ’</li>
<li>third_line='250 OK  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250 OK  ’</li>
<li>third_line=‘250 OK’</li>
<li>write_back ‘250 OK’</li>
<li>trap error_handler ERR</li>
<li>printf ‘250 OK\r\n’</li>
<li>echo ‘0dfc0d53-58e7-45ca-b06a-610ef52721c1 BACK: 250 OK’</li>
<li>read -r</li>
<li>cleaned_reply=$‘QUIT\r’<br>
++ tr ‘\r’ ’ '<br>
++ echo $‘QUIT\r’</li>
<li>cleaned_reply='QUIT '<br>
++ tr ‘\n’ ’ '<br>
++ echo 'QUIT ’</li>
<li>cleaned_reply='QUIT  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo 'QUIT  ’</li>
<li>cleaned_reply=QUIT</li>
<li>received QUIT</li>
<li>trap error_handler ERR</li>
<li>true QUIT</li>
<li>echo ‘0dfc0d53-58e7-45ca-b06a-610ef52721c1 GOT: QUIT’</li>
<li>‘[’ QUIT = ‘’ ‘]’</li>
<li>read -r first_word _</li>
<li>‘[’ quit = authenticate ‘]’</li>
<li>‘[’ quit = quit ‘]’</li>
<li>break</li>
<li>echo '0dfc0d53-58e7-45ca-b06a-610ef52721c1 INFO: End.'<br>
tcpserver: end 15004 status 0<br>
tcpserver: status: 0/40<br>
tcpserver: status: 1/40<br>
tcpserver: pid 15079 from 192.168.0.11<br>
tcpserver: ok 15079 host:192.168.0.10:9052 :192.168.0.11::41770</li>
<li>‘[’ -z ‘’ ‘]’</li>
<li>return</li>
<li>/usr/lib/whonix/cpf-tcpserver</li>
<li>set -o pipefail</li>
<li>LOG=/var/log/controlportfilt.log</li>
<li>trap error_handler ERR</li>
<li>trap trap_sigint SIGINT<br>
++ uuidgen -r</li>
<li>ID=b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>cpf_pid=15079</li>
<li>echo 'b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 INFO: Getting connection… cpf_pid: 15079 | LD_PRELOAD: ’</li>
<li>kill_after=5s</li>
<li>timeout_after=5s</li>
<li>‘[’ -d /etc/controlportfilt.d ‘]’</li>
<li>for i in ‘/etc/controlportfilt.d/*’</li>
<li>‘[’ -f /etc/controlportfilt.d/30_controlportfilt_default ‘]’</li>
<li>‘[’ t = ‘~’ ‘]’</li>
<li>grep -q .dpkg-</li>
<li>echo /etc/controlportfilt.d/30_controlportfilt_default</li>
<li>source /etc/controlportfilt.d/30_controlportfilt_default<br>
++ CONTROL_PORT_FILTER_PROXY=1<br>
++ CONTROL_PORT_FILTER_VERBOSE=0<br>
++ CONTROL_PORT_FILTER_WHITELIST=(“AUTHENTICATE” “GETINFO net/listeners/socks” “GETINFO status/bootstrap-phase” “SIGNAL NEWNYM” “QUIT”)</li>
<li>‘[’ 0 = 1 ‘]’</li>
<li>i=0</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=authenticate</li>
<li>i=1</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘getinfo net/listeners/socks’</li>
<li>i=2</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘getinfo status/bootstrap-phase’</li>
<li>i=3</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=‘signal newnym’</li>
<li>i=4</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_WHITELIST[@]}"’</li>
<li>CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[$i]=quit</li>
<li>i=5</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: authenticate’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo net/listeners/socks’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo status/bootstrap-phase’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: signal newnym’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: quit’</li>
<li>check_tor</li>
<li>trap error_handler ERR</li>
<li>‘[’ -f /var/run/tor/control.authcookie ‘]’</li>
<li>tor_authcookie=0</li>
<li>‘[’ -f /var/run/tor/tor.pid ‘]’</li>
<li>tor_pid=1<br>
++ cat /var/run/tor/tor.pid</li>
<li>tor_pid=2433</li>
<li>tor_pid_running=0</li>
<li>kill -0 2433</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>check_tor_result=0</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>read -r<br>
’ cleaned_reply='GETINFO status/bootstrap-phase<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo 'GETINFO status/bootstrap-phase</li>
<li>cleaned_reply='GETINFO status/bootstrap-phase '<br>
++ tr ‘\n’ ’ '<br>
++ echo 'GETINFO status/bootstrap-phase ’</li>
<li>cleaned_reply='GETINFO status/bootstrap-phase  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo 'GETINFO status/bootstrap-phase  ’</li>
<li>cleaned_reply=‘GETINFO status/bootstrap-phase’</li>
<li>received ‘GETINFO status/bootstrap-phase’</li>
<li>trap error_handler ERR</li>
<li>true ‘GETINFO status/bootstrap-phase’</li>
<li>echo ‘b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 GOT: GETINFO status/bootstrap-phase’</li>
<li>‘[’ ‘GETINFO status/bootstrap-phase’ = ‘’ ‘]’</li>
<li>read -r first_word _</li>
<li>‘[’ getinfo = authenticate ‘]’</li>
<li>‘[’ getinfo = quit ‘]’</li>
<li>ok=0</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: authenticate’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = authenticate ‘]’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo net/listeners/socks’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo net/listeners/socks’ ‘]’</li>
<li>for element in ‘"${CONTROL_PORT_FILTER_LOWERCASE_WHITELIST[@]}"’</li>
<li>true ‘CONTROL_PORT_FILTER_LOWERCASE_WHITELIST element: getinfo status/bootstrap-phase’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo status/bootstrap-phase’ ‘]’</li>
<li>ok=1</li>
<li>true ‘ok: reply getinfo status/bootstrap-phase = element getinfo status/bootstrap-phase’</li>
<li>break</li>
<li>‘[’ ‘!’ 1 = 1 ‘]’</li>
<li>lie_when=‘GETINFO net/listeners/socks’</li>
<li>‘[’ ‘getinfo status/bootstrap-phase’ = ‘getinfo net/listeners/socks’ ‘]’<br>
++ mktemp --directory</li>
<li>temp_directory=/tmp/tmp.C8j2sARSPN</li>
<li>IN=/tmp/tmp.C8j2sARSPN/in_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>OUT=/tmp/tmp.C8j2sARSPN/out_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>mkfifo /tmp/tmp.C8j2sARSPN/in_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>mkfifo /tmp/tmp.C8j2sARSPN/out_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>NC_PID=15097</li>
<li>check_tor</li>
<li>trap error_handler ERR</li>
<li>‘[’ -f /var/run/tor/control.authcookie ‘]’</li>
<li>tor_authcookie=0</li>
<li>‘[’ -f /var/run/tor/tor.pid ‘]’</li>
<li>tor_pid=1<br>
++ cat /var/run/tor/tor.pid</li>
<li>nc 127.0.0.1 9051</li>
<li>tor_pid=2433</li>
<li>tor_pid_running=0</li>
<li>kill -0 2433</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>‘[’ 0 = 0 ‘]’</li>
<li>check_tor_result=0</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>xxd_exit_code=0<br>
++ xxd -c 32 -g 0 /var/run/tor/control.authcookie</li>
<li>temporary_variable_one=‘0000000: 9cea67006a7105d5dbdc03bf9703e824b02c81be5353e311c9b872c267e7ea6a  …g.jq…$.,…SS…r.g…j’</li>
<li>‘[’ ‘!’ 0 = 0 ‘]’</li>
<li>read -r temporary_variable_two cookie _</li>
<li>wait 15100</li>
<li>timeout --kill-after=2s 2s echo ‘AUTHENTICATE 9cea67006a7105d5dbdc03bf9703e824b02c81be5353e311c9b872c267e7ea6a’</li>
<li>wait 15102</li>
<li>timeout --kill-after=2s 2s echo ‘GETINFO status/bootstrap-phase’</li>
<li>wait 15104</li>
<li>timeout --kill-after=2s 2s echo QUIT<br>
++ timeout --kill-after=2s 2s cat /tmp/tmp.C8j2sARSPN/in_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6</li>
<li>var='250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection</li>
<li>ps_p_exit_code=0</li>
<li>ps -p 15097</li>
<li>ps_p_exit_code=1</li>
<li>true</li>
<li>echo ‘b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 debug: ps_p_exit_code: 1’</li>
<li>‘[’ ‘250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’ = ‘’ ']'g connection</li>
<li>true 'var: 250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection</li>
<li>echo ‘250 OK<br>
250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"<br>
250 OK<br>
’50 closing connection<br>
++ sed -n 1,1p<br>
++ cat /tmp/tmp.C8j2sARSPN/temp_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6<br>
’ first_line='250 OK<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250 OK</li>
<li>first_line='250 OK '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250 OK ’</li>
<li>first_line='250 OK  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250 OK  ’</li>
<li>first_line=‘250 OK’</li>
<li>‘[’ ‘250 OK’ = ‘250 OK’ ‘]’</li>
<li>true<br>
++ sed -n 2,2p<br>
++ cat /tmp/tmp.C8j2sARSPN/temp_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6<br>
’ second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”</li>
<li>second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done” '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done” ’</li>
<li>second_line='250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”  ’</li>
<li>second_line=‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>write_back ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>trap error_handler ERR</li>
<li>printf ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”\r\n’</li>
<li>echo ‘b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 BACK: 250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’</li>
<li>‘[’ ‘250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY=“Done”’ = ‘250 OK’ ‘]’<br>
++ sed -n 3,3p<br>
++ cat /tmp/tmp.C8j2sARSPN/temp_b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6<br>
’ third_line='250 OK<br>
++ tr ‘\r’ ’ ‘<br>
’+ echo '250 OK</li>
<li>third_line='250 OK '<br>
++ tr ‘\n’ ’ '<br>
++ echo '250 OK ’</li>
<li>third_line='250 OK  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo '250 OK  ’</li>
<li>third_line=‘250 OK’</li>
<li>write_back ‘250 OK’</li>
<li>trap error_handler ERR</li>
<li>printf ‘250 OK\r\n’</li>
<li>echo ‘b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 BACK: 250 OK’</li>
<li>read -r</li>
<li>cleaned_reply=$‘QUIT\r’<br>
++ tr ‘\r’ ’ '<br>
++ echo $‘QUIT\r’</li>
<li>cleaned_reply='QUIT '<br>
++ tr ‘\n’ ’ '<br>
++ echo 'QUIT ’</li>
<li>cleaned_reply='QUIT  '<br>
++ sed -e ‘s/ {1,}$//’<br>
++ echo 'QUIT  ’</li>
<li>cleaned_reply=QUIT</li>
<li>received QUIT</li>
<li>trap error_handler ERR</li>
<li>true QUIT</li>
<li>echo ‘b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 GOT: QUIT’</li>
<li>‘[’ QUIT = ‘’ ‘]’</li>
<li>read -r first_word _</li>
<li>‘[’ quit = authenticate ‘]’</li>
<li>‘[’ quit = quit ‘]’</li>
<li>break</li>
<li>echo 'b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 INFO: End.'<br>
tcpserver: end 15079 status 0<br>
tcpserver: status: 0/40<br>
[/code]</li>
</ul>
<p><span class="bbcode-b">controlportfilt.log</span></p>
<p><code>0dfc0d53-58e7-45ca-b06a-610ef52721c1 BACK: 250 OK
0dfc0d53-58e7-45ca-b06a-610ef52721c1 GOT: QUIT
0dfc0d53-58e7-45ca-b06a-610ef52721c1 INFO: End.
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 INFO: Getting connection... cpf_pid: 15079 | LD_PRELOAD: 
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 GOT: GETINFO status/bootstrap-phase
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 debug: ps_p_exit_code: 1
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 BACK: 250-status/bootstrap-phase=NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 BACK: 250 OK
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 GOT: QUIT
b2c73fd5-79d5-4271-bd8e-cc6f790ab8f6 INFO: End.</code></p>
<p><code>root@host:/home/user# sudo -u debian-tor valgrind --leak-check=full --show-reachable=yes tcpserver -v -1 -l host -H 0 9052 /bin/bash -x -c /usr/lib/whonix/cpf-tcpserver
==16783== Memcheck, a memory error detector
==16783== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==16783== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==16783== Command: tcpserver -v -1 -l host -H 0 9052 /bin/bash -x -c /usr/lib/whonix/cpf-tcpserver
==16783== 
tcpserver: fatal: unable to bind: address already used
==16783== 
==16783== HEAP SUMMARY:
==16783==     in use at exit: 976 bytes in 1 blocks
==16783==   total heap usage: 3 allocs, 2 frees, 2,496 bytes allocated
==16783== 
==16783== 976 bytes in 1 blocks are still reachable in loss record 1 of 1
==16783==    at 0x4028308: malloc (vg_replace_malloc.c:263)
==16783==    by 0x804DDB7: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804F819: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804F2F3: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804E98A: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804E4D5: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804BD95: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804C14C: ??? (in /usr/bin/tcpserver)
==16783==    by 0x804B6A1: ??? (in /usr/bin/tcpserver)
==16783==    by 0x8049C1A: ??? (in /usr/bin/tcpserver)
==16783==    by 0x4055E45: (below main) (libc-start.c:244)
==16783== 
==16783== LEAK SUMMARY:
==16783==    definitely lost: 0 bytes in 0 blocks
==16783==    indirectly lost: 0 bytes in 0 blocks
==16783==      possibly lost: 0 bytes in 0 blocks
==16783==    still reachable: 976 bytes in 1 blocks
==16783==         suppressed: 0 bytes in 0 blocks
==16783== 
==16783== For counts of detected and suppressed errors, rerun with: -v
==16783== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 11 from 6)</code></p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/19">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/19</link>
        <pubDate>Tue, 15 Jul 2014 01:54:41 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-19</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>In Whonix 8, path is /usr/lib/whonix/cpf-tcpserver.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/18">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/18</link>
        <pubDate>Mon, 14 Jul 2014 15:36:26 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-18</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>/usr/lib/cpf-tcpserver no such file or directory</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/17">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/17</link>
        <pubDate>Mon, 14 Jul 2014 15:29:08 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-17</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>controlportfiltd on Whonix 8. control-port-filter in Whonix 9.</p>
<pre><code class="lang-auto"></code></pre>
<p>(You can find the names of services/daemon check /etc/init.d/ folder and using bash competition [press  after tying “sudo service c”].)</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/16">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/16</link>
        <pubDate>Mon, 14 Jul 2014 04:04:27 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-16</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>2 problems:</p>
<p>control-port-filter: unrecognized service</p>
<p>tcpserver: fatal: unable to bind: address already taken</p>
<p>I’d say the second error is the result of the first.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/15">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/15</link>
        <pubDate>Mon, 14 Jul 2014 02:45:59 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-15</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>debian-tor</p>
<p>Sorry.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/14">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/14</link>
        <pubDate>Mon, 14 Jul 2014 00:21:55 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-14</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>unknown user debian:tor</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/13">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/13</link>
        <pubDate>Mon, 14 Jul 2014 00:17:53 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-13</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Not sure I understand. The parameters are copied from /usr/bin/controlportfilt. Those are really used there. Just have a look at /usr/bin/controlportfilt. Use them all at once. Otherwise for example “-v” alone will again do nothing.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/12">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/12</link>
        <pubDate>Sun, 13 Jul 2014 23:50:50 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-12</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>ok, but are these alternate parameters or all part of the same one?</p>
<p><code>   -v \
    -1 \
    -l host \
    -H \
    0 \
    9052 \
    /bin/bash -x -c /usr/lib/cpf-tcpserver</code></p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/11">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/11</link>
        <pubDate>Sun, 13 Jul 2014 23:24:26 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-11</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <blockquote>metapackage ucspi-tcp.</blockquote>
<p>ucspi-tcp is not a metapackage by debian packaging definition. It’s just a package that provides multiple binaries. Not special in this regard.</p>
<blockquote>Its my guess that the check needs to be run for every binary listed for this package?</blockquote>
<p>You can do this, but I don’t think you’ll find anything interesting. Just as for example running “cp --help” doesn’t move any files, running “tcpserver” don’t use networking.</p>
<p>See my earlier answer <a href="https://www.whonix.org/forum/index.php/topic,381.msg2795.html#msg2795">https://www.whonix.org/forum/index.php/topic,381.msg2795.html#msg2795</a> on how to make a real world test and/or use tcpserver for any other real purpose. Once you found tcpserver useful, get valgrind involved.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/10">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/10</link>
        <pubDate>Sun, 13 Jul 2014 23:08:36 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-10</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>dpkg -L ucspi-tcp</p>
<p>lists all binaries under the <span class="bbcode-u">metapackage</span> ucspi-tcp.<br>
The actual binaries are many of which the most important being <span class="bbcode-b">tcpserver</span></p>
<pre><code class="lang-auto">/.
/usr
/usr/bin
/usr/bin/tcprules
/usr/bin/tcpserver
/usr/bin/addcr
/usr/bin/mconnect-io
/usr/bin/rblsmtpd
/usr/bin/argv0
/usr/bin/recordio
/usr/bin/fixcrio
/usr/bin/tcprulescheck
/usr/bin/tcpclient
/usr/bin/who@
/usr/bin/http@
/usr/bin/date@
/usr/bin/finger@
/usr/bin/delcr
/usr/bin/mconnect
/usr/bin/tcpcat
/usr/share
/usr/share/man
/usr/share/man/man1
/usr/share/man/man1/recordio.1.gz
/usr/share/man/man1/argv0.1.gz
/usr/share/man/man1/who@.1.gz
/usr/share/man/man1/tcprules.1.gz
/usr/share/man/man1/rblsmtpd.1.gz
/usr/share/man/man1/addcr.1.gz
/usr/share/man/man1/fixcrio.1.gz
/usr/share/man/man1/http@.1.gz
/usr/share/man/man1/tcpclient.1.gz
/usr/share/man/man1/delcr.1.gz
/usr/share/man/man1/tcprulescheck.1.gz
/usr/share/man/man1/tcpcat.1.gz
/usr/share/man/man1/tcpserver.1.gz
/usr/share/man/man1/date@.1.gz
/usr/share/man/man1/mconnect.1.gz
/usr/share/man/man1/finger@.1.gz
/usr/share/doc
/usr/share/doc/ucspi-tcp
/usr/share/doc/ucspi-tcp/changelog.Debian.gz
/usr/share/doc/ucspi-tcp/copyright
/usr/share/doc/ucspi-tcp/README
/usr/share/doc/ucspi-tcp/README.Debian
/usr/share/doc/ucspi-tcp/NEWS.Debian.gz
/usr/share/doc/ucspi-tcp/changelog.gz
/usr/share/doc/ucspi-tcp/VERSION
/usr/share/doc/ucspi-tcp/TODO</code></pre>
<p>valgrind --tool=memcheck --leak-check=full tcpserver</p>
<p>HEAP SUMMARY:<br>
in use at exit: 0 bytes in 0 blocks<br>
total heap usage: 0 bytes in 0 blocks</p>
<p>All heap blocks were freed – no leaks possible</p>
<p>Its my guess that the check needs to be run for every binary listed for this package?</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/9">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/9</link>
        <pubDate>Sun, 13 Jul 2014 22:49:45 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-9</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>(Perhaps helpful for this: <a href="https://www.whonix.org/wiki/Tor_Browser#Verify_New_Identity">https://www.whonix.org/wiki/Tor_Browser#Verify_New_Identity</a>)</p>
<p>This doesn’t even work when just typing “ucspi-tcp” in the shell, because there is no such command “ucspi-tcp”. The command we’re using is “tcpserver”. But also just running “tcpserver” won’t do much, just show “tcpserver”'s help.</p>
<p>Inspired by /usr/bin/controlportfilt.</p>
<p>On Whonix-Gateway.</p>
<p>Stop control-port-filter, because we’ll start tcpserver manually.</p>
<pre><code class="lang-auto"></code></pre>
<p>Let’s first test if this is working without involving valgrind.</p>
<p><code>sudo -u debian-tor tcpserver \
    -v \
    -1 \
    -l host \
    -H \
    0 \
    9052 \
    /bin/bash -x -c /usr/lib/cpf-tcpserver</code></p>
<p>In Whonix 8, path is /usr/lib/whonix/cpf-tcpserver.</p>
<p>Check if Control Port Filter is still working (<a href="https://www.whonix.org/wiki/Tor_Browser#Verify_New_Identity">https://www.whonix.org/wiki/Tor_Browser#Verify_New_Identity</a>).</p>
<pre><code class="lang-auto"></code></pre>
<p>Now involve valgrind into the equation.</p>
<p><code>sudo -u debian-tor valgrind --leak-check=yes tcpserver \
    -v \
    -1 \
    -l host \
    -H \
    0 \
    9052 \
    /bin/bash -x -c /usr/lib/cpf-tcpserver</code></p>
<p>Maybe that helps.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/8">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/8</link>
        <pubDate>Sun, 13 Jul 2014 22:48:16 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-8</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <pre><code class="lang-auto">
gives error:

command not found


What an I doing wrong here? The command syntax is wrong but I can't figure out how to do this.</code></pre>
<p>gives error:</p>
<p>command not found</p>
<p>What an I doing wrong here? The command syntax is wrong but I can’t figure out how to do this.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/7">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/7</link>
        <pubDate>Sun, 13 Jul 2014 22:12:56 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-7</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Shot Gerrit a mail.</p>
<p>What I could probably do know is try with Valgrind with the running package. Lacking explicit debugging options in the source code may make looking at the log harder. At the moment I am concerned about getting an idea if there is any memory problems at all.</p>
<p>When running it some hours ago, I had run into issues and so I’ll describe them.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/6">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/6</link>
        <pubDate>Sun, 13 Jul 2014 21:59:53 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-6</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>There is also a few people who can be found on search engines, who forked ucspi-tcp, who might be willing and able to help this cause.</p>
<p>[quote=“HulaHoop, post:4, topic:363”]I assume TAILS uses it because that security enhancement for ControlPort Filter was discussed and implemented by them first.</p>
<p><a href="https://www.whonix.org/forum/index.php/topic,342.msg2433%5B/quote%5D" class="onebox" target="_blank">https://www.whonix.org/forum/index.php/topic,342.msg2433[/quote]</a><br>
It was about limiting the characters allowed to 128, which is good, but has no relation to ucspi-tcp.</p>
<blockquote>If they have nothing to do with it then I would like to be of assistance in auditing/fuzzing this package with your assistance.</blockquote>
Terrific!
<blockquote>1. compile ucspi from source with the correct debugging hooks so Valgrind can use it:
http://valgrind.org/docs/manual/quick-start.html
I'll be happy to send the logs as I would have no idea whats in them or how to fix it , but the Debian guys will.</blockquote>
Sounds good.
<blockquote>2. Import the source code that I got from Debian repos in to Git so I can sign onto Coverity and run a check.</blockquote>
debian/control contains.
<p><code>Maintainer: Gerrit Pape &lt;pape@smarden.org&gt;
Vcs-Git: http://smarden.org/git/ucspi-tcp.git/</code></p>
<p>Getting it from git is better than apt-get source, but anyway. The Vcs-Git link is currently offline. Please tell Gerrit Pape about it.</p>
<p>If there is no reply, we need to open a bug against Debian. But let’s not expect the worst.</p>
<blockquote>3. Check with PeachFuzzer by following this guide: http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/</blockquote>
Sounds good.
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/5">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/5</link>
        <pubDate>Sun, 13 Jul 2014 19:56:48 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-5</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>I assume TAILS uses it because that security enhancement for ControlPort Filter was discussed and implemented by them first.</p>
<p><a href="https://www.whonix.org/forum/index.php/topic,342.msg2433" class="onebox" target="_blank">https://www.whonix.org/forum/index.php/topic,342.msg2433</a></p>
<p>If they have nothing to do with it then I would like to be of assistance in auditing/fuzzing this package with your assistance. Just walk me through how to:</p>
<ol>
<li>
<p>compile ucspi from source with the correct debugging hooks so Valgrind can use it:<br>
<a href="http://valgrind.org/docs/manual/quick-start.html">http://valgrind.org/docs/manual/quick-start.html</a><br>
I’ll be happy to send the logs as I would have no idea whats in them or how to fix it , but the Debian guys will.</p>
</li>
<li>
<p>Import the source code that I got from Debian repos in to Git so I can sign onto Coverity and run a check.</p>
</li>
<li>
<p>Check with PeachFuzzer by following this guide: <a href="http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/">http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/</a></p>
</li>
</ol>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/4">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/4</link>
        <pubDate>Sun, 13 Jul 2014 18:39:44 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-4</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Reasonable. Sure, fixing holes in the first place is better. A multi layered security concept with AppArmor as one line of defense.</p>
<p>If problems are found, those can be reported against Debian. We’re lucky, that they have a dedicated security team, capable of C, and they would fix any security issues, and Whonix would automatically profit from their fixes in the security repository. Great to be based on Debian.</p>
<p>ucspi-tcp is written in C. For a quick look, you can use “apt-get source ucspi-tcp”.</p>
<p>I do not follow what Tails has to do with this? They are not using control-port-filter / ucspi-tcp.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/3">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/3</link>
        <pubDate>Sun, 13 Jul 2014 17:59:01 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-3</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
      <item>
        <title>Ucspi-tcp Automated Code Checks</title>
        <dc:creator><![CDATA[HulaHoop]]></dc:creator>
        <description><![CDATA[
            <p>Actually I am not sure what language ucspi-tcp is written in. I was looking at someone’s repo that had a Ruby wrapper for this package and mistaked it for the server itself.</p>
          <p><a href="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/2">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363/2</link>
        <pubDate>Sun, 13 Jul 2014 15:49:03 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-363-2</guid>
        <source url="http://forums.whonix.org/t/ucspi-tcp-automated-code-checks/363.rss">Ucspi-tcp Automated Code Checks</source>
      </item>
  </channel>
</rss>
