<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
    <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243</link>
    <description>I want to isolate my hidden service application in an unprivileged LXC, which is available in the latest Ubuntu 14.04. I don&#39;t know much about iptables, so I looked at the Whonix Gateway iptables rules, changing eth1 to lxcbr0. I think it&#39;s still too restrictive. I don&#39;t need the host OS to be a Whonix Gateway per se. I don&#39;t need host OS connections to be torified. My intention is that an attacker inside the LXC can&#39;t determine the IP address by curl&#39;ing, wget&#39;ing or phoning home to his server. If he &quot;breaks out&quot; of the LXC then there are many ways to obtain the IP address and torification of the host OS is useless. Could someone help me refine these iptables rules to allow the host OS to run normally but torify all connections coming from lxcbr0 (the LXC virtual bridge adapter)? Here&#39;s what I have so far. Thanks in advance.

## External interface
EXT_IF=&quot;eth0&quot;
## Internal interface
INT_IF=&quot;lxcbr0&quot;
## Internal &quot;tunnel&quot; interface, usually the same as
## the Internal interface unless using vpn tunnels
## between workstations and gateway
INT_TIF=&quot;lxcbr0&quot;

## Destinations you don not want routed through Tor
NON_TOR_WHONIXG=&quot;192.168.1.0/24 192.168.0.0/24 127.0.0.0/8&quot;

## Transparent Proxy Port
TRANS_PORT_WHONIXW=&quot;9040&quot;

## DNSPort
DNS_PORT_WHONIXW=&quot;53&quot;



###########################
## IPv4 DEFAULTS
###########################

## Set secure defaults.
iptables -P INPUT DROP   #####  This rule kills my ssh connection too.

## FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
iptables -P FORWARD DROP

## Only the Tor process is allowed to establish outgoing connections.
iptables -P OUTPUT DROP

###########################
## IPv4 PREPARATIONS
###########################

## Flush old rules.
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X

############################
## IPv4 DROP INVALID PACKAGES
############################

## DROP INVALID
iptables -A INPUT -m state --state INVALID -j DROP

## DROP INVALID SYN PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
iptables -A INPUT -f -j DROP

## DROP INCOMING MALFORMED XMAS PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

## DROP INCOMING MALFORMED NULL PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP


###########################
## IPv4 INPUT
###########################

## Traffic on the loopback interface is accepted.
iptables -A INPUT -i lo -j ACCEPT

## Established incoming connections are accepted.
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

## Allow incoming SSH connections on the external interface.
iptables -A INPUT -i &quot;$EXT_IF&quot; -p tcp --dport 22 -j ACCEPT

## Allow DNS traffic to DNSPort.
iptables -A INPUT -i &quot;$INT_TIF&quot; -p udp --dport 53 -j ACCEPT

## Allow TCP traffic TransPort.
iptables -A INPUT -i &quot;$INT_IF&quot; -p tcp --dport &quot;$TRANS_PORT_WHONIXW&quot; -j ACCEPT

## Redirect remaining DNS traffic to DNSPORT.
iptables -t nat -A PREROUTING -i &quot;$INT_IF&quot; -p udp --dport 53 -j REDIRECT --to-ports &quot;$DNS_PORT_WHONIXW&quot;

## Catch all remaining TCP and redirect to TransPort.
iptables -t nat -A PREROUTING -i &quot;$INT_IF&quot; -p tcp --syn -j REDIRECT --to-ports &quot;$TRANS_PORT_WHONIXW&quot;

## Reject anything not explicitly allowed above.
iptables -A INPUT -j DROP

###########################
## IPv4 FORWARD
###########################

## Reject everything.
iptables -A FORWARD -j REJECT --reject-with icmp-admin-prohibited


###########################
## IPv6
###########################

## Policy DROP for all traffic as fallback.
ip6tables -P INPUT DROP
ip6tables -P OUTPUT DROP
ip6tables -P FORWARD DROP

## Flush old rules.
ip6tables -F
ip6tables -X
ip6tables -t mangle -F
ip6tables -t mangle -X

## Allow unlimited access on loopback.
## Not activated, since we do not need it.
#ip6tables -A INPUT -i lo -j ACCEPT
#ip6tables -A OUTPUT -o lo -j ACCEPT

## Drop/reject all other traffic.
ip6tables -A INPUT -j DROP
## --reject-with icmp-admin-prohibited not supported by ip6tables
ip6tables -A OUTPUT -j REJECT
## --reject-with icmp-admin-prohibited not supported by ip6tables
ip6tables -A FORWARD -j REJECT

###########################
## End
###########################</description>
    <language>en</language>
    <lastBuildDate>Thu, 24 Apr 2014 10:04:54 +0000</lastBuildDate>
    <category>General Tor and Anonymity Talk</category>
    <atom:link href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>This question is as difficult as “can you port Whonix to KVM?” Big effort.</p>
<p>Unfortunately our old leak testing thread for Whonix/KVM was lost together with our old AWCforum, would have given an idea how much is involved.</p>
<p>Some comments:</p>
<ul>
<li>When you got a functional, for leak testing, see: <a href="https://www.whonix.org/wiki/Dev/Leak_Tests">https://www.whonix.org/wiki/Dev/Leak_Tests</a>
</li>
<li>Everything through Tor at once isn’t a good idea. see: <a href="https://www.whonix.org/wiki/Stream_Isolation">https://www.whonix.org/wiki/Stream_Isolation</a>
</li>
<li>Eventually also interesting, hardware ids, see: <a href="https://www.whonix.org/wiki/Whonix%27s_Protocol-Leak-Protection_and_Fingerprinting-Protection">https://www.whonix.org/wiki/Whonix's_Protocol-Leak-Protection_and_Fingerprinting-Protection</a>
</li>
</ul>
<p>Eventually someone on the tor-talk mailing list will have something to contribute.</p>
<p>Looks to me, this one will require someone to do the hard work, to doing original research.</p>
          <p><a href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/5">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/5</link>
        <pubDate>Thu, 24 Apr 2014 10:04:54 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-243-5</guid>
        <source url="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss">Torifying a Linux Container with Whonix Gateway Firewall Rules</source>
      </item>
      <item>
        <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
        <dc:creator><![CDATA[malcolm]]></dc:creator>
        <description><![CDATA[
            <p>I was told that this might work but haven’t tried it yet.</p>
<p>#!/bin/sh<br>
NON_TOR=“192.168.1.0/24 10.0.2.0/24 10.0.3.0/24”  # First and second range should be changed based on actual external network<br>
TOR_UID="x"<br>
TRANS_PORT="9040"<br>
INT_IF="lxcbr0"<br>
iptables -F<br>
iptables -t nat -F<br>
iptables -t nat -A OUTPUT -o lo -j RETURN<br>
iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN<br>
iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53<br>
for NET in $NON_TOR; do<br>
iptables -t nat -A OUTPUT -d $NET -j RETURN<br>
iptables -t nat -A PREROUTING -i $INT_IF -d $NET -j RETURN<br>
done<br>
iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT<br>
iptables -t nat -A PREROUTING -i $INT_IF -p udp --dport 53 -j REDIRECT --to-ports 53<br>
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT<br>
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br>
for NET in $NON_TOR 127.0.0.0/8; do<br>
iptables -A OUTPUT -d $NET -j ACCEPT<br>
done<br>
iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT<br>
iptables -A OUTPUT -j REJECT</p>
          <p><a href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/4">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/4</link>
        <pubDate>Thu, 24 Apr 2014 04:31:23 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-243-4</guid>
        <source url="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss">Torifying a Linux Container with Whonix Gateway Firewall Rules</source>
      </item>
      <item>
        <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
        <dc:creator><![CDATA[malcolm]]></dc:creator>
        <description><![CDATA[
            <p>Also, the lxcbr0 gateway is 10.0.3.1 and all Linux containers are given IP addresses in the 10.0.3.0/24 space.</p>
          <p><a href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/3">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/3</link>
        <pubDate>Thu, 24 Apr 2014 02:41:30 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-243-3</guid>
        <source url="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss">Torifying a Linux Container with Whonix Gateway Firewall Rules</source>
      </item>
      <item>
        <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
        <dc:creator><![CDATA[malcolm]]></dc:creator>
        <description><![CDATA[
            <p>I should add that my torrc running on the host OS is configured like this.</p>
<p>VirtualAddrNetworkIPv4 10.192.0.0/10<br>
AutoMapHostsOnResolve 1<br>
TransPort 9040<br>
DNSPort 53</p>
          <p><a href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/2">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/2</link>
        <pubDate>Thu, 24 Apr 2014 02:37:12 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-243-2</guid>
        <source url="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss">Torifying a Linux Container with Whonix Gateway Firewall Rules</source>
      </item>
      <item>
        <title>Torifying a Linux Container with Whonix Gateway Firewall Rules</title>
        <dc:creator><![CDATA[malcolm]]></dc:creator>
        <description><![CDATA[
            <p>I want to isolate my hidden service application in an unprivileged LXC, which is available in the latest Ubuntu 14.04. I don’t know much about iptables, so I looked at the Whonix Gateway iptables rules, changing eth1 to lxcbr0. I think it’s still too restrictive. I don’t need the host OS to be a Whonix Gateway per se. I don’t need host OS connections to be torified. My intention is that an attacker inside the LXC can’t determine the IP address by curl’ing, wget’ing or phoning home to his server. If he “breaks out” of the LXC then there are many ways to obtain the IP address and torification of the host OS is useless. Could someone help me refine these iptables rules to allow the host OS to run normally but torify all connections coming from lxcbr0 (the LXC virtual bridge adapter)? Here’s what I have so far. Thanks in advance.</p>
<h2>External interface</h2>
<p>EXT_IF=“eth0”</p>
<h2>Internal interface</h2>
<p>INT_IF=“lxcbr0”</p>
<h2>Internal “tunnel” interface, usually the same as</h2>
<h2>the Internal interface unless using vpn tunnels</h2>
<h2>between workstations and gateway</h2>
<p>INT_TIF=“lxcbr0”</p>
<h2>Destinations you don not want routed through Tor</h2>
<p>NON_TOR_WHONIXG=“192.168.1.0/24 192.168.0.0/24 127.0.0.0/8”</p>
<h2>Transparent Proxy Port</h2>
<p>TRANS_PORT_WHONIXW=“9040”</p>
<h2>DNSPort</h2>
<p>DNS_PORT_WHONIXW=“53”</p>
<p>###########################</p>
<h2>IPv4 DEFAULTS</h2>
<p>###########################</p>
<h2>Set secure defaults.</h2>
<p>iptables -P INPUT DROP   #####  This rule kills my ssh connection too.</p>
<h2>FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.</h2>
<p>iptables -P FORWARD DROP</p>
<h2>Only the Tor process is allowed to establish outgoing connections.</h2>
<p>iptables -P OUTPUT DROP</p>
<p>###########################</p>
<h2>IPv4 PREPARATIONS</h2>
<p>###########################</p>
<h2>Flush old rules.</h2>
<p>iptables -F<br>
iptables -X<br>
iptables -t nat -F<br>
iptables -t nat -X<br>
iptables -t mangle -F<br>
iptables -t mangle -X</p>
<p>############################</p>
<h2>IPv4 DROP INVALID PACKAGES</h2>
<p>############################</p>
<h2>DROP INVALID</h2>
<p>iptables -A INPUT -m state --state INVALID -j DROP</p>
<h2>DROP INVALID SYN PACKETS</h2>
<p>iptables -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP<br>
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP<br>
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP</p>
<h2>DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS</h2>
<p>iptables -A INPUT -f -j DROP</p>
<h2>DROP INCOMING MALFORMED XMAS PACKETS</h2>
<p>iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP</p>
<h2>DROP INCOMING MALFORMED NULL PACKETS</h2>
<p>iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP</p>
<p>###########################</p>
<h2>IPv4 INPUT</h2>
<p>###########################</p>
<h2>Traffic on the loopback interface is accepted.</h2>
<p>iptables -A INPUT -i lo -j ACCEPT</p>
<h2>Established incoming connections are accepted.</h2>
<p>iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</p>
<h2>Allow incoming SSH connections on the external interface.</h2>
<p>iptables -A INPUT -i “$EXT_IF” -p tcp --dport 22 -j ACCEPT</p>
<h2>Allow DNS traffic to DNSPort.</h2>
<p>iptables -A INPUT -i “$INT_TIF” -p udp --dport 53 -j ACCEPT</p>
<h2>Allow TCP traffic TransPort.</h2>
<p>iptables -A INPUT -i “$INT_IF” -p tcp --dport “$TRANS_PORT_WHONIXW” -j ACCEPT</p>
<h2>Redirect remaining DNS traffic to DNSPORT.</h2>
<p>iptables -t nat -A PREROUTING -i “$INT_IF” -p udp --dport 53 -j REDIRECT --to-ports “$DNS_PORT_WHONIXW”</p>
<h2>Catch all remaining TCP and redirect to TransPort.</h2>
<p>iptables -t nat -A PREROUTING -i “$INT_IF” -p tcp --syn -j REDIRECT --to-ports “$TRANS_PORT_WHONIXW”</p>
<h2>Reject anything not explicitly allowed above.</h2>
<p>iptables -A INPUT -j DROP</p>
<p>###########################</p>
<h2>IPv4 FORWARD</h2>
<p>###########################</p>
<h2>Reject everything.</h2>
<p>iptables -A FORWARD -j REJECT --reject-with icmp-admin-prohibited</p>
<p>###########################</p>
<h2>IPv6</h2>
<p>###########################</p>
<h2>Policy DROP for all traffic as fallback.</h2>
<p>ip6tables -P INPUT DROP<br>
ip6tables -P OUTPUT DROP<br>
ip6tables -P FORWARD DROP</p>
<h2>Flush old rules.</h2>
<p>ip6tables -F<br>
ip6tables -X<br>
ip6tables -t mangle -F<br>
ip6tables -t mangle -X</p>
<h2>Allow unlimited access on loopback.</h2>
<h2>Not activated, since we do not need it.</h2>
<p><span class="hashtag">#ip6tables</span> -A INPUT -i lo -j ACCEPT<br>
<span class="hashtag">#ip6tables</span> -A OUTPUT -o lo -j ACCEPT</p>
<h2>Drop/reject all other traffic.</h2>
<p>ip6tables -A INPUT -j DROP</p>
<h2>–reject-with icmp-admin-prohibited not supported by ip6tables</h2>
<p>ip6tables -A OUTPUT -j REJECT</p>
<h2>–reject-with icmp-admin-prohibited not supported by ip6tables</h2>
<p>ip6tables -A FORWARD -j REJECT</p>
<p>###########################</p>
<h2>End</h2>
<p>###########################</p>
          <p><a href="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/1">Read full topic</a></p>
        ]]></description>
        <link>http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243/1</link>
        <pubDate>Thu, 24 Apr 2014 02:36:09 +0000</pubDate>
        <guid isPermaLink="false">forums.whonix.org-post-243-1</guid>
        <source url="http://forums.whonix.org/t/torifying-a-linux-container-with-whonix-gateway-firewall-rules/243.rss">Torifying a Linux Container with Whonix Gateway Firewall Rules</source>
      </item>
  </channel>
</rss>
